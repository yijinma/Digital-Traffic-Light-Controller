--Group 8: Dongyue Zhou, Yijin Ma
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

Entity State_Machine_Example IS 
  Port (
    clk_input, enable, reset, blink_sig, NS_Req, EW_Req : IN std_logic;
    NS_A, NS_D, NS_G, EW_A, EW_D, EW_G                  : OUT std_logic;
    clear1, clear                                       : OUT std_logic;
    NS_crossing_signal, EW_crossing_signal              : OUT std_logic;
    State_Number                                        : OUT std_logic_vector(3 downto 0)
  );
END ENTITY;

Architecture SM of State_Machine_Example is

  TYPE STATE_NAMES IS (S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15);
  SIGNAL current_state, next_state : STATE_NAMES;

BEGIN

  -------------------------------------------------------------------
  -- State Machine: Register Logic
  -------------------------------------------------------------------
  Register_Section: PROCESS (clk_input)
  BEGIN
    IF (rising_edge(clk_input)) THEN
      IF (reset = '1') THEN
        current_state <= S0;      -- reset to initial state
      ELSIF (reset = '0' AND enable = '1') THEN
        current_state <= next_state;
      END IF;
    END IF;
  END PROCESS;

  -------------------------------------------------------------------
  -- State Machine: Transition Logic
  -------------------------------------------------------------------
  Transition_Section: PROCESS (NS_req, EW_req, current_state)
  BEGIN
    CASE current_state IS
      WHEN S0 =>
        IF (EW_Req = '1' AND NS_Req = '0') THEN
          next_state <= S6;
        ELSE
          next_state <= S1;
        END IF;

      WHEN S1 =>
        IF (EW_Req = '1' AND NS_Req = '0') THEN
          next_state <= S6;
        ELSE
          next_state <= S2;
        END IF;

      WHEN S2 =>
        next_state <= S3;

      WHEN S3 =>
        next_state <= S4;

      WHEN S4 =>
        next_state <= S5;

      WHEN S5 =>
        next_state <= S6;

      WHEN S6 =>
        next_state <= S7;

      WHEN S7 =>
        next_state <= S8;

      WHEN S8 =>
        IF (EW_Req = '0' AND NS_Req = '1') THEN
          next_state <= S14;
        ELSE
          next_state <= S9;
        END IF;

      WHEN S9 =>
        IF (EW_Req = '0' AND NS_Req = '1') THEN
          next_state <= S14;
        ELSE
          next_state <= S10;
        END IF;

      WHEN S10 =>
        next_state <= S11;

      WHEN S11 =>
        next_state <= S12;

      WHEN S12 =>
        next_state <= S13;

      WHEN S13 =>
        next_state <= S14;

      WHEN S14 =>
        next_state <= S15;

      WHEN S15 =>
        next_state <= S0;

      WHEN OTHERS =>
        next_state <= S0;
    END CASE;
  END PROCESS;

  -------------------------------------------------------------------
  -- State Machine: Decoder Logic
  -------------------------------------------------------------------
  Decoder_Section: PROCESS (current_state)
  BEGIN
    CASE current_state IS

      -- Example: State 0
      WHEN S0 =>
        State_Number <= "0000";
        NS_A <= '0'; NS_D <= blink_sig; NS_G <= '0';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '0';

      -- State 1
      WHEN S1 =>
        State_Number <= "0001";
        NS_A <= '0'; NS_D <= blink_sig; NS_G <= '0';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '0';

      -- State 2
      WHEN S2 =>
        State_Number <= "0010";
        NS_A <= '0'; NS_D <= '1'; NS_G <= '1';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '1';
        EW_crossing_signal <= '0';

      -- State 3
      WHEN S3 =>
        State_Number <= "0011";
        NS_A <= '0'; NS_D <= '1'; NS_G <= '1';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '1';
        EW_crossing_signal <= '0';

      -- State 4
      WHEN S4 =>
        State_Number <= "0100";
        NS_A <= '0'; NS_D <= '1'; NS_G <= '1';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '1';
        EW_crossing_signal <= '0';

      -- State 5
      WHEN S5 =>
        State_Number <= "0101";
        NS_A <= '0'; NS_D <= '1'; NS_G <= '1';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '1';
        EW_crossing_signal <= '0';

      -- State 6
      WHEN S6 =>
        State_Number <= "0110";
        NS_A <= '0'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '1'; EW_D <= '1'; EW_G <= '1';
        clear <= '1'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '0';

      -- State 7
      WHEN S7 =>
        State_Number <= "0111";
        NS_A <= '0'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '1'; EW_D <= '1'; EW_G <= '1';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '0';

      -- State 8
      WHEN S8 =>
        State_Number <= "1000";
        NS_A <= '1'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= blink_sig; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '0';

      -- State 9
      WHEN S9 =>
        State_Number <= "1001";
        NS_A <= '1'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= blink_sig; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '1';

      -- State 10
      WHEN S10 =>
        State_Number <= "1010";
        NS_A <= '1'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= '1'; EW_G <= '1';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '1';

      -- State 11
      WHEN S11 =>
        State_Number <= "1011";
        NS_A <= '1'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= '1'; EW_G <= '1';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '1';

      -- State 12
      WHEN S12 =>
        State_Number <= "1100";
        NS_A <= '1'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= '1'; EW_G <= '1';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '1';

      -- State 13
      WHEN S13 =>
        State_Number <= "1101";
        NS_A <= '1'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= '1'; EW_G <= '1';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '1';

      -- State 14
      WHEN S14 =>
        State_Number <= "1110";
        NS_A <= '1'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '1';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '0';

      -- State 15
      WHEN S15 =>
        State_Number <= "1111";
        NS_A <= '1'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '0';

      WHEN OTHERS =>
        NS_A <= '0'; NS_D <= '0'; NS_G <= '0';
        EW_A <= '0'; EW_D <= '0'; EW_G <= '0';
        clear <= '0'; clear1 <= '0';
        NS_crossing_signal <= '0';
        EW_crossing_signal <= '0';
    END CASE;
  END PROCESS;

END ARCHITECTURE SM;
